name: CMake

on: [push, pull_request]

jobs:
  build:
    name: Poltergeist CMake 
    runs-on: ${{matrix.os}}

    env:
      buildDir: '${{github.workspace}}/out'
      llvmLocation: '${{github.workspace}}/llvm'

    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest,ubuntu-20.04]
        compiler: ['msvc','clangcl','gcc','clang']
        generator: ['Visual Studio 16 2019', 'MSYS Makefiles', 'Unix Makefiles']
        configuration: ['Debug', 'Release']
        exclude:
          - os: windows-latest
            generator: 'Unix Makefiles'
          - os: windows-latest
            compiler: 'gcc'
          - os: windows-latest
            compiler: 'clang'
          - os: ubuntu-20.04
            compiler: 'clangcl'
          - os: ubuntu-20.04
            compiler: 'msvc'
          - os: ubuntu-20.04
            generator: 'Visual Studio 16 2019'
          - os: ubuntu-20.04
            generator: 'MSYS Makefiles' 
          - compiler: 'msvc'
            generator: 'MSYS Makefiles'
          - compiler: 'clangcl'
            generator: 'MSYS Makefiles'
          - compiler: 'gcc'
            generator: 'Visual Studio 16 2019'
          - compiler: 'clang'
            generator: 'Visual Studio 16 2019'
        include:
          - compiler: 'clangcl'
            toolkit: ' -T ClangCL'
#          - generator: 'Visual Studio 16 2019'
#            cmakewrapper: ''
#          - generator: 'MSYS Makefiles'
#            cmakewrapper: 'msys2 -c'
#          - generator: 'Visual Studio 16 2019'
#            cmakewrapper: ''

    steps:
    - uses: actions/checkout@v2.3.4
      with:
        submodules: 'recursive'

    - if: matrix.os == 'ubuntu-20.04'
      name: Install dependencies
      run: |
        sudo apt update
        sudo apt install build-essential gcc-10 g++-10 clang llvm cmake libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev libtinfo6

    - if: matrix.generator == 'MSYS Makefiles'
      name: Setup MSYS2
      uses: msys2/setup-msys2@v2

    - if: matrix.compiler == 'msvc'
      name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1

    - if: matrix.compiler == 'gcc' && matrix.os != 'windows-latest'
      shell: 'bash'
      name: Set up GCC
      run: |
        echo "CC=gcc-10" >> $GITHUB_ENV
        echo "CXX=g++-10" >> $GITHUB_ENV
        
#    - if: matrix.compiler == 'gcc' && matrix.os == 'windows-latest'
#      shell: 'msys2 {0}'
#      name: Set up GCC
#      run: |
#        echo "CC=gcc" >> $GITHUB_ENV
#        echo "CXX=g++" >> $GITHUB_ENV

    - if: matrix.compiler == 'clang' && matrix.os != 'windows-latest'
      name: Cache LLVM and Clang
      id: cache-llvm
      uses: actions/cache@v3.0.1
      with:
        path: '${{env.llvmLocation}}'
        key: llvm-11

    - if: matrix.compiler == 'clang' && matrix.os != 'windows-latest'
      name: Install LLVM and Clang
      uses: KyleMayes/install-llvm-action@v1
      with:
        version: "11"
        directory: '${{env.llvmLocation}}'
        cached: ${{ steps.cache-llvm.outputs.cache-hit }}

    - if: matrix.compiler == 'clang' && matrix.os != 'windows-latest'
      shell: 'bash'
      name: Enable CLANG
      run: |
        echo "CC=${{env.llvmLocation}}/bin/clang" >> $GITHUB_ENV
        echo "CXX=${{env.llvmLocation}}/bin/clang++" >> $GITHUB_ENV
        
#    - if: matrix.compiler == 'clang' && matrix.os == 'windows-latest'
#      shell: 'msys2 {0}'
#      name: Enable CLANG
#      run: |
#        echo "CC=clang" >> $GITHUB_ENV
#        echo "CXX=clang++" >> $GITHUB_ENV

    - name: Get latest CMake and ninja
      uses: lukka/get-cmake@latest

    - name: Run vcpkg
      uses: lukka/run-vcpkg@v7.4
      with:
        setupOnly: true
        doNotUpdateVcpkg: true
        vcpkgDirectory: '${{github.workspace}}/vcpkg'
        appendedCacheKey: ${{matrix.os}}-${{matrix.generator}}-${{matrix.compiler}}-${{matrix.toolkit}}-${{matrix.configuration}}-${{hashFiles('vcpkg.json')}}
        additionalCachedPaths: '${{env.buildDir}}/vcpkg_installed'

    - name: Build
      uses: lukka/run-cmake@v3.4
      with:
#        cmakeWrapperCommand: '${{matrix.cmakewrapper}}'
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        useVcpkgToolchainFile: true
        buildWithCMake: true
        buildWithCMakeArgs: '--config ${{matrix.configuration}}'
        buildDirectory: ${{env.buildDir}}
        cmakeListsTxtPath: '${{github.workspace}}/CMakeLists.txt'
        cmakeAppendedArgs: '-G "${{matrix.generator}}" -DCMAKE_BUILD_TYPE=${{matrix.configuration}}${{matrix.toolkit}}'
